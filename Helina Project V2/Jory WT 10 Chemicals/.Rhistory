for (l in 1:length(norm_counts_files)){
Genes <- unique(rownames(DEG_table_files_list[[l]]))
DEG_counts <- rownames_to_column(norm_counts_list[[l]][rownames(norm_counts_list[[l]]) %in% Genes,], var = "gene")
DEG_counts_list[[paste0(str_split(names(norm_counts_list[l]), pattern = "_", simplify = TRUE)[,1], "_DEG_Norm_Counts_Data")]] <- DEG_counts
}
#3. Write the normalized counts, containing only DEGs (As-per the R-ODAF)
for (l in 1:length(DEG_counts_list)) {
write.table(DEG_counts_list[[l]], paste0(here::here(), "/RNAseqData/output/", names(DEG_counts_list[l]), "R-ODAF_DESeq2.txt"), sep = "\t", quote = FALSE)
}
View(DEG_counts_list)
View(DEG_counts_list[["Analine_DEG_Norm_Counts_Data"]])
View(DEG_counts)
DEG_counts_list[[l]]
set_names()
set_Names()
?set_names
?data.table::setnames
names(DEG_counts)
DEG_counts <- norm_counts_list[[l]][rownames(norm_counts_list[[l]]) %in% Genes,]
names(DEG_counts)
str_split(names(DEG_counts))
str_split(names(DEG_counts), pattern = "_")
str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,4]
DEG_counts <- norm_counts_list[[l]][rownames(norm_counts_list[[l]]) %in% Genes,]
DEG_counts <- data.table::setnames(DEG_counts, old = names(DEG_counts), new = str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,4])
View(DEG_counts)
l
DEG_counts <- rownames_to_column(DEG_counts, var = "dose")
DEG_counts <- rownames_to_column(DEG_counts, var = "dose", .name_repair = "minimal")
View(DEG_counts)
DEG_counts <- rownames_to_column(DEG_counts, var = "dose", .name_repair = "minimal")
DEG_counts <- rownames_to_column(DEG_counts, var = "dose", name_repair = "minimal")
DEG_counts <- norm_counts_list[[l]][rownames(norm_counts_list[[l]]) %in% Genes,]
DEG_counts <- data.table::setnames(DEG_counts, old = names(DEG_counts), new = paste0(str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,4], "_", str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,5]))
str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,4]
DEG_counts <- norm_counts_list[[l]][rownames(norm_counts_list[[l]]) %in% Genes,]
View(DEG_counts)
DEG_counts <- norm_counts_list[[l]][rownames(norm_counts_list[[l]]) %in% Genes,]
View(DEG_counts)
norm_counts_list[[l]][rownames(norm_counts_list[[l]]) %in% Genes,]
Genhes
Genes
norm_counts_list[[1]]
norm_counts_list[[l]]
rownames(norm_counts_list[[l]])
norm_counts_list[[l]][rownames(norm_counts_list[[l]]) %in% Genes,]
View(norm_counts_list)
colnames(norm_counts_list[["Analine_R-ODAF_DESeq2_Norm_Data.txt"]])
l
colnames(norm_counts_list[["Trenbolone_R-ODAF_DESeq2_Norm_Data.txt"]])
#Filter Gene Counts of only DEGs
#1. Import Counts data and DEG tables
norm_counts_files <- list.files(paste0(here::here(), "/RNAseqData/output"), pattern = "Norm_Data.txt")
norm_counts_list <- NULL
for (l in norm_counts_files) {
file <- read.table(paste0(here::here(), "/RNAseqData/output/", l), row.names = 1)
norm_counts_list[[l]] <- file
}
DEG_table_files <- list.files(paste0(here::here(), "/RNAseqData/output"), pattern = "DEG_table.txt")
DEG_table_files_list <- NULL
for (l in DEG_table_files) {
file <- read.table(paste0(here::here(), "/RNAseqData/output/", l), row.names = 1)
DEG_table_files_list[[l]] <- file
}
#2. Filter out only the counts rows that are in the DEG table
DEG_counts_list <- NULL
norm_counts_list[9]
l=1
Genes <- unique(rownames(DEG_table_files_list[[l]]))
DEG_counts <- norm_counts_list[[l]][rownames(norm_counts_list[[l]]) %in% Genes,]
DEG_counts
DEG_counts <- data.table::setnames(DEG_counts, old = names(DEG_counts), new = paste0(str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,4], "_", str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,5]))
DEG_counts
DEG_counts <- rownames_to_column(DEG_counts, var = "dose", name_repair = "minimal")
DEG_counts <- rownames_to_column(DEG_counts, var = "dose")
DEG_counts
DEG_counts <- data.table::setnames(DEG_counts, old = names(DEG_counts), new = str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,1])
View(DEG_counts)
#2. Filter out only the counts rows that are in the DEG table
DEG_counts_list <- NULL
for (l in 1:length(norm_counts_files)){
Genes <- unique(rownames(DEG_table_files_list[[l]]))
DEG_counts <- norm_counts_list[[l]][rownames(norm_counts_list[[l]]) %in% Genes,]
DEG_counts <- data.table::setnames(DEG_counts, old = names(DEG_counts), new = paste0(str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,4], "_", str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,5]))
DEG_counts <- rownames_to_column(DEG_counts, var = "dose")
DEG_counts <- data.table::setnames(DEG_counts, old = names(DEG_counts), new = str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,1])
DEG_counts_list[[paste0(str_split(names(norm_counts_list[l]), pattern = "_", simplify = TRUE)[,1], "_DEG_Norm_Counts_Data")]] <- DEG_counts
}
l
Genes <- unique(rownames(DEG_table_files_list[[l]]))
DEG_counts <- norm_counts_list[[l]][rownames(norm_counts_list[[l]]) %in% Genes,]
DEG_counts <- data.table::setnames(DEG_counts, old = names(DEG_counts), new = paste0(str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,4], "_", str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,5]))
#Filter Gene Counts of only DEGs
#1. Import Counts data and DEG tables
norm_counts_files <- list.files(paste0(here::here(), "/RNAseqData/output"), pattern = "Norm_Data.txt")
norm_counts_list <- NULL
for (l in norm_counts_files) {
file <- read.table(paste0(here::here(), "/RNAseqData/output/", l), row.names = 1)
norm_counts_list[[l]] <- file
}
DEG_table_files <- list.files(paste0(here::here(), "/RNAseqData/output"), pattern = "DEG_table.txt")
DEG_table_files_list <- NULL
for (l in DEG_table_files) {
file <- read.table(paste0(here::here(), "/RNAseqData/output/", l), row.names = 1)
DEG_table_files_list[[l]] <- file
}
#2. Filter out only the counts rows that are in the DEG table
DEG_counts_list <- NULL
for (l in 1:length(norm_counts_files)){
Genes <- unique(rownames(DEG_table_files_list[[l]]))
DEG_counts <- norm_counts_list[[l]][rownames(norm_counts_list[[l]]) %in% Genes,]
DEG_counts <- data.table::setnames(DEG_counts, old = names(DEG_counts), new = paste0(str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,4], "_", str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,5]))
DEG_counts <- rownames_to_column(DEG_counts, var = "dose")
DEG_counts <- data.table::setnames(DEG_counts, old = names(DEG_counts), new = str_split(names(DEG_counts), pattern = "_", simplify = TRUE)[,1])
DEG_counts_list[[paste0(str_split(names(norm_counts_list[l]), pattern = "_", simplify = TRUE)[,1], "_DEG_Norm_Counts_Data")]] <- DEG_counts
}
View(DEG_counts_list)
View(DEG_counts_list[["Analine_DEG_Norm_Counts_Data"]])
#3. Write the normalized counts, containing only DEGs (As-per the R-ODAF)
for (l in 1:length(DEG_counts_list)) {
write.table(DEG_counts_list[[l]], paste0(here::here(), "/RNAseqData/output/", names(DEG_counts_list[l]), "R-ODAF_DESeq2.txt"), sep = "\t", quote = FALSE, row.names = FALSE)
}
#Rename Norm Data File columns
#1. Import Normalized Data
norm_counts_list <- NULL
norm_counts_files <- list.files(paste0(here::here(), "/RNAseqData/output"), pattern = "Norm_Data.txt")
norm_counts_list <- NULL
for (l in norm_counts_files) {
file <- read.table(paste0(here::here(), "/RNAseqData/output/", l), row.names = 1)
norm_counts_list[[l]] <- file
}
#2. Rename
renames_norm_counts_list <- NULL
l=1
renamed_norm_counts <- norm_counts_list[[l]]
names(renamed_norm_counts)
#2. Rename
renamed_norm_counts_list <- NULL
names(renamed_norm_counts_list[l])
renamed_norm_counts_list[[paste0(str_split(names(norm_counts_list[l]), pattern = "_", simplify = TRUE)[,1], "_Norm_Data")]] <- renamed_norm_counts
names(renamed_norm_counts_list[l])
norm_counts_files <- list.files(paste0(here::here(), "/RNAseqData/output"), pattern = "Norm_Data.txt")
norm_counts_list <- NULL
for (l in norm_counts_files) {
file <- read.table(paste0(here::here(), "/RNAseqData/output/", l), row.names = 1)
norm_counts_list[[l]] <- file
}
#2. Rename
renamed_norm_counts_list <- NULL
for (l in 1:length(norm_counts_files)){
renamed_norm_counts <- norm_counts_list[[l]]
renamed_norm_counts <- data.table::setnames(renamed_norm_counts, old = names(renamed_norm_counts), new = paste0(str_split(names(renamed_norm_counts), pattern = "_", simplify = TRUE)[,4], "_", str_split(names(renamed_norm_counts), pattern = "_", simplify = TRUE)[,5])) #Chemical dose (4) and Replicate (5)
renamed_norm_counts <- rownames_to_column(renamed_norm_counts, var = "dose") #Function does not work with duplicated colnames
renamed_norm_counts <- data.table::setnames(renamed_norm_counts, old = names(renamed_norm_counts), new = str_split(names(renamed_norm_counts), pattern = "_", simplify = TRUE)[,1]) #Removing replicate
renamed_norm_counts_list[[paste0(str_split(names(norm_counts_list[l]), pattern = "_", simplify = TRUE)[,1], "R-ODAF_DESeq2_Norm_Data")]] <- renamed_norm_counts
write.table(renamed_norm_counts_list[[l]], paste0(here::here(), "/RNAseqData/output/", names(renamed_norm_counts_list[l]), "test.txt"), sep = "\t", quote = FALSE, row.names = FALSE)
}
#Rename Norm Data File columns
#1. Import Normalized Data
norm_counts_files <- list.files(paste0(here::here(), "/RNAseqData/output"), pattern = "Norm_Data.txt")
norm_counts_list <- NULL
for (l in norm_counts_files) {
file <- read.table(paste0(here::here(), "/RNAseqData/output/", l), row.names = 1)
norm_counts_list[[l]] <- file
}
#2. Rename
renamed_norm_counts_list <- NULL
for (l in 1:length(norm_counts_files)){
renamed_norm_counts <- norm_counts_list[[l]]
renamed_norm_counts <- data.table::setnames(renamed_norm_counts, old = names(renamed_norm_counts), new = paste0(str_split(names(renamed_norm_counts), pattern = "_", simplify = TRUE)[,4], "_", str_split(names(renamed_norm_counts), pattern = "_", simplify = TRUE)[,5])) #Chemical dose (4) and Replicate (5)
renamed_norm_counts <- rownames_to_column(renamed_norm_counts, var = "dose") #Function does not work with duplicated colnames
renamed_norm_counts <- data.table::setnames(renamed_norm_counts, old = names(renamed_norm_counts), new = str_split(names(renamed_norm_counts), pattern = "_", simplify = TRUE)[,1]) #Removing replicate
renamed_norm_counts_list[[paste0(str_split(names(norm_counts_list[l]), pattern = "_", simplify = TRUE)[,1], "R-ODAF_DESeq2_Norm_Data")]] <- renamed_norm_counts
write.table(renamed_norm_counts_list[[l]], paste0(here::here(), "/RNAseqData/output/", names(renamed_norm_counts_list[l]), "_renamed_4_Tylers_WF.txt"), sep = "\t", quote = FALSE, row.names = FALSE)
}
#Rename Norm Data File columns
#1. Import Normalized Data
norm_counts_files <- list.files(paste0(here::here(), "/RNAseqData/output"), pattern = "Norm_Data.txt")
norm_counts_list <- NULL
for (l in norm_counts_files) {
file <- read.table(paste0(here::here(), "/RNAseqData/output/", l), row.names = 1)
norm_counts_list[[l]] <- file
}
#2. Rename
renamed_norm_counts_list <- NULL
for (l in 1:length(norm_counts_files)){
renamed_norm_counts <- norm_counts_list[[l]]
renamed_norm_counts <- data.table::setnames(renamed_norm_counts, old = names(renamed_norm_counts), new = paste0(str_split(names(renamed_norm_counts), pattern = "_", simplify = TRUE)[,4], "_", str_split(names(renamed_norm_counts), pattern = "_", simplify = TRUE)[,5])) #Chemical dose (4) and Replicate (5)
renamed_norm_counts <- rownames_to_column(renamed_norm_counts, var = "dose") #Function does not work with duplicated colnames
renamed_norm_counts <- data.table::setnames(renamed_norm_counts, old = names(renamed_norm_counts), new = str_split(names(renamed_norm_counts), pattern = "_", simplify = TRUE)[,1]) #Removing replicate
renamed_norm_counts_list[[paste0(str_split(names(norm_counts_list[l]), pattern = "_", simplify = TRUE)[,1], "_R-ODAF_DESeq2_Norm_Data")]] <- renamed_norm_counts
write.table(renamed_norm_counts_list[[l]], paste0(here::here(), "/RNAseqData/output/", names(renamed_norm_counts_list[l]), "_renamed_4_Tylers_WF.txt"), sep = "\t", quote = FALSE, row.names = FALSE)
}
?results
library(tidyverse)
library(purrr)
source("BMDExpressFunctions.R")
####Metadata Import####
metadata <- read.csv("RNAseqData/metadata.csv")
chemnames <- unique(metadata$chemical)
lowestdoses <- unique(metadata[,c("chemical","dose")]) %>%
group_by(chemical) %>%
filter(dose>0) %>%
summarise_all(min)
highestdoses <- unique(metadata[,c("chemical","dose")]) %>%
group_by(chemical) %>%
filter(dose>0) %>%
summarise_all(max)
filenames <- list.files("BMDExpressData_R-ODAF/BMD/", pattern = ".txt") %>% setNames(chemnames)
filenames
# first import "sloppy data' to identify what row starts with "Probe Id"
row_start <- vector()
for (i in chemnames) {
row_start[i] <-readLines(paste0("BMDExpressData_R-ODAF/BMD/", filenames[i])) %>%
grepl("Probe Id.*", .) %>%
which()
}
# import data starting at correct line
raw_data <- list()
raw_data <- list()
for (i in chemnames) {
raw_data[[i]] <- suppressWarnings(suppressMessages(  # suppresses annoying parsing error warnings/messages
read_delim(paste0("BMDExpressData_R-ODAF/BMD/", filenames[i]),
skip=row_start[i]-1,
delim="\t",
col_select=c("Probe Id",
"BMD",
"BMDL",
"BMDU",
"fitPValue"),
show_col_types = FALSE)
)) %>%
as.data.frame()
}
View(raw_data)
View(raw_data[["Analine"]])
raw_data_filtered <- list()
for(i in 1:length(raw_data)){
raw_data_filtered[[chemnames[i]]] <- BMDfiltering(x = raw_data[[i]],
lowdose = lowestdoses$dose[i],
highdose = highestdoses$dose[i],
) %>%
mutate(logBMD = log10(BMD))
}
# load source code
source("mode_antimode.R")
# variables and options (current values based on optimization results)
min_dense<-0.06  # minimum probability density to be considered a "mode"
min_bw <- 0.015 # minimum bandwidth (too much resolution gives strange "peaks")
bwFun<-"SJ" # choose nrd0 or SJ. the "bandwidth" function to use to determine modes. I've selected the Sheather & Jones (1991) method. see: https://www.ncbi.nlm.nih.gov/pubmed/24885339
# lists tosave results
dataModes <- list()
firstMode <- list()
firstAntiMode <- list()
histBreaks <- list()
# run in a loop!
for(i in 1:length(raw_data_filtered)){
# calculate modes
dataModes[[i]]<-mode.antimode(raw_data_filtered[[i]]$logBMD ,min.size=min_dense, bw="SJ", min.bw=min_bw)
# # First Mode
# firstMode[[i]] <- dataModes[[i]]$modes[1]
#
# # First Antimode
# firstAntiMode[[i]] <-dataModes[[i]]$anti.modes[1]
# histogram plot with modes/antimodes using the same bandwidth as the mode algorithm
histBreaks[[i]]<-seq(
from = min(raw_data_filtered[[i]]$logBMD) - dataModes[[i]]$bw,
to = max(raw_data_filtered[[i]]$logBMD) + dataModes[[i]]$bw,
by = dataModes[[i]]$bw
)
}
min(raw_data_filtered[[1]]$logBMD)
dataModes[[1]]$bw
View(dataModes)
raw_data_filtered
length(raw_data_filtered)
# run in a loop!
for(i in 1:length(raw_data_filtered)){
# calculate modes
dataModes[[i]]<-mode.antimode(raw_data_filtered[[i]]$logBMD ,min.size=min_dense, bw="SJ", min.bw=min_bw)
# # First Mode
# firstMode[[i]] <- dataModes[[i]]$modes[1]
#
# # First Antimode
# firstAntiMode[[i]] <-dataModes[[i]]$anti.modes[1]
# histogram plot with modes/antimodes using the same bandwidth as the mode algorithm
histBreaks[[i]]<-seq(
from = min(raw_data_filtered[[i]]$logBMD) - dataModes[[i]]$bw,
to = max(raw_data_filtered[[i]]$logBMD) + dataModes[[i]]$bw,
by = dataModes[[i]]$bw
)
}
mode.antimode(raw_data_filtered[[1]]$logBMD ,min.size=min_dense, bw="SJ", min.bw=min_bw)
mode.antimode(raw_data_filtered[[2]]$logBMD ,min.size=min_dense, bw="SJ", min.bw=min_bw)
dataModes[[i]]
# run in a loop!
for (i in 1:length(raw_data_filtered)) {
# calculate modes
dataModes[[i]] <-
mode.antimode(
raw_data_filtered[[i]]$logBMD ,
min.size = min_dense,
bw = "SJ",
min.bw = min_bw
)
# # First Mode
# firstMode[[i]] <- dataModes[[i]]$modes[1]
#
# # First Antimode
# firstAntiMode[[i]] <-dataModes[[i]]$anti.modes[1]
if (dataModes[[i]]$modes == NA)
next
histBreaks[[i]] <- seq(
from = min(raw_data_filtered[[i]]$logBMD) - dataModes[[i]]$bw,
to = max(raw_data_filtered[[i]]$logBMD) + dataModes[[i]]$bw,
by = dataModes[[i]]$bw
)
# histogram plot with modes/antimodes using the same bandwidth as the mode algorithm
}
# run in a loop!
for (i in 1:length(raw_data_filtered)) {
# calculate modes
dataModes[[i]] <-
mode.antimode(
raw_data_filtered[[i]]$logBMD ,
min.size = min_dense,
bw = "SJ",
min.bw = min_bw
)
# # First Mode
# firstMode[[i]] <- dataModes[[i]]$modes[1]
#
# # First Antimode
# firstAntiMode[[i]] <-dataModes[[i]]$anti.modes[1]
if (is.na(dataModes[[i]]$modes))
next
histBreaks[[i]] <- seq(
from = min(raw_data_filtered[[i]]$logBMD) - dataModes[[i]]$bw,
to = max(raw_data_filtered[[i]]$logBMD) + dataModes[[i]]$bw,
by = dataModes[[i]]$bw
)
# histogram plot with modes/antimodes using the same bandwidth as the mode algorithm
}
is.na(dataModes[[i]]$modes)
i
# run in a loop!
for (i in 1:length(raw_data_filtered)) {
# calculate modes
dataModes[[i]] <-
mode.antimode(
raw_data_filtered[[i]]$logBMD ,
min.size = min_dense,
bw = "SJ",
min.bw = min_bw
)
# # First Mode
# firstMode[[i]] <- dataModes[[i]]$modes[1]
#
# # First Antimode
# firstAntiMode[[i]] <-dataModes[[i]]$anti.modes[1]
if (is.na(dataModes[[i]]$modes))
next
else(
histBreaks[[i]] <- seq(
from = min(raw_data_filtered[[i]]$logBMD) - dataModes[[i]]$bw,
to = max(raw_data_filtered[[i]]$logBMD) + dataModes[[i]]$bw,
by = dataModes[[i]]$bw
))
# histogram plot with modes/antimodes using the same bandwidth as the mode algorithm
}
# run in a loop!
for (i in 1:length(raw_data_filtered)) {
# calculate modes
dataModes[[i]] <-
mode.antimode(
raw_data_filtered[[i]]$logBMD ,
min.size = min_dense,
bw = "SJ",
min.bw = min_bw
)
# # First Mode
# firstMode[[i]] <- dataModes[[i]]$modes[1]
#
# # First Antimode
# firstAntiMode[[i]] <-dataModes[[i]]$anti.modes[1]
if (is.na(dataModes[[i]]$modes))
next
else {
histBreaks[[i]] <- seq(
from = min(raw_data_filtered[[i]]$logBMD) - dataModes[[i]]$bw,
to = max(raw_data_filtered[[i]]$logBMD) + dataModes[[i]]$bw,
by = dataModes[[i]]$bw
)
}
# histogram plot with modes/antimodes using the same bandwidth as the mode algorithm
}
# run in a loop!
for (i in 1:length(raw_data_filtered)) {
# calculate modes
dataModes[[i]] <-
mode.antimode(
raw_data_filtered[[i]]$logBMD ,
min.size = min_dense,
bw = "SJ",
min.bw = min_bw
)
# # First Mode
# firstMode[[i]] <- dataModes[[i]]$modes[1]
#
# # First Antimode
# firstAntiMode[[i]] <-dataModes[[i]]$anti.modes[1]
if (is.na(dataModes[[i]]$modes)) { next }
else {
histBreaks[[i]] <- seq(
from = min(raw_data_filtered[[i]]$logBMD) - dataModes[[i]]$bw,
to = max(raw_data_filtered[[i]]$logBMD) + dataModes[[i]]$bw,
by = dataModes[[i]]$bw
)
}
# histogram plot with modes/antimodes using the same bandwidth as the mode algorithm
}
is.na(dataModes[[i]]$modes)
i
View(dataModes)
datamodes[1]
dataModes[1]
is.numeric(dataModes[[1]])
is.numeric(dataModes[[2]])
is.numeric(dataModes[[3]])
is.numeric(dataMode[[1]])
View(Cont4compare)
View(dataModes)
any(is.na(dataModes[[1]]))
any(is.na(dataModes[[2]]))
!any(is.na(dataModes[[i]]))
any(!is.na(dataModes[[i]]))
any(is.na(!dataModes[[i]]))
any(is.na(dataModes[[i]]))
any(is.na(dataModes[[1]]))
# run in a loop!
for (i in 1:length(raw_data_filtered)) {
# calculate modes
dataModes[[i]] <-
mode.antimode(
raw_data_filtered[[i]]$logBMD ,
min.size = min_dense,
bw = "SJ",
min.bw = min_bw
)
# # First Mode
# firstMode[[i]] <- dataModes[[i]]$modes[1]
#
# # First Antimode
# firstAntiMode[[i]] <-dataModes[[i]]$anti.modes[1]
if (any(is.na(dataModes[[i]]))) {}
else {
histBreaks[[i]] <- seq(
from = min(raw_data_filtered[[i]]$logBMD) - dataModes[[i]]$bw,
to = max(raw_data_filtered[[i]]$logBMD) + dataModes[[i]]$bw,
by = dataModes[[i]]$bw
)
}
# histogram plot with modes/antimodes using the same bandwidth as the mode algorithm
}
View(dataModes)
View(histBreaks)
tpod_values <- data.frame(unique(metadata[,"chemical"])) %>%
rename(chemical = contains("chemical"))
?contains
tpod_values <- data.frame(unique(metadata[,"chemical"])) %>%
rename(chemical = dplyr::contains("chemical"))
tpod_values <- data.frame(unique(metadata[,"chemical"])) %>%
rename(chemical = tidyr::contains("chemical"))
tpod_values <- data.frame(unique(metadata[,"chemical"])) %>%
rename(chemical = vroom::contains("chemical"))
tpod_values <- data.frame(unique(metadata[,"chemical"])) %>%
rename(chemical = tidyselect::contains("chemical"))
data.frame(unique(metadata[,"chemical"]))
unique(metadata[,"chemical"])
data.frame(chemical = c(unique(metadata[,"chemical"])))
for(i in 1:length(raw_data)){
#first mode tPoD
tpod_values[i,"first_mode"] <- dataModes[[i]]$modes[1]
#calculate 10th percentile tPoD
tpod_values[i,"10th_percentile"] <- raw_data_filtered[[i]][,"BMD"] %>%
quantile(probs = 0.1) %>% log10()
#calculate 20th gene tPoD
if(length(raw_data_filtered[[i]][,"BMD"]) >= 20){
tpod_values[i,"20th_gene"] <- raw_data_filtered[[i]][,"BMD"] %>%
Rfast::nth(20, descending = FALSE) %>% log10()
} else {
tpod_values[i,"20th_gene"] <- NA
}
}
tpod_values <-  data.frame(chemical = c(unique(metadata[,"chemical"])))
for(i in 1:length(raw_data)){
#first mode tPoD
tpod_values[i,"first_mode"] <- dataModes[[i]]$modes[1]
#calculate 10th percentile tPoD
tpod_values[i,"10th_percentile"] <- raw_data_filtered[[i]][,"BMD"] %>%
quantile(probs = 0.1) %>% log10()
#calculate 20th gene tPoD
if(length(raw_data_filtered[[i]][,"BMD"]) >= 20){
tpod_values[i,"20th_gene"] <- raw_data_filtered[[i]][,"BMD"] %>%
Rfast::nth(20, descending = FALSE) %>% log10()
} else {
tpod_values[i,"20th_gene"] <- NA
}
}
library(Rfast)
install.packages("Rfast")
library(Rfast)
