stringsAsFactors = FALSE,
sep = "\t",
strip.white = TRUE) [-c(1:4),-c(2:3)]
colnames(raw_data[[i]][[j]]) <- c("gene", j)
}
}
####Adjust row and col names####
#Set gene col as row names
for(i in 1:length(raw_data)) {
raw_data[[i]] <- raw_data[[i]] %>%
reduce(left_join, by = "gene") %>%
remove_rownames() %>%
column_to_rownames("gene")
}
#Clean up col names
for(i in 1:length(raw_data)) {
temp <- gsub(pattern = "-GQReadsPerGene.out.tab",
replacement = "",
x = names(raw_data[[i]]),
fixed = TRUE)
colnames(raw_data[[i]]) <- temp
remove(temp)
}
####Median Filtering####
#set threshold
median_thrs <- 5
#Remove genes that do not meet median threshold
raw_data_median_norm <- list()
for(i in chemnames) {
raw_data_median_norm[[i]] <- raw_data[[i]] %>%
mutate(count_median = apply(raw_data[[i]], 1, median)) %>%
filter(count_median >= median_thrs) %>%
select(-count_median)
}
####Combined all the data together####
for(i in 1:length(raw_data_median_norm)) {
raw_data_median_norm[[i]] <- raw_data_median_norm[[i]] %>%
rownames_to_column("gene")
}
####Combined all the data together####
for(i in 1:length(raw_data_median_norm)) {
raw_data_median_norm[[i]] <- raw_data_median_norm[[i]] %>%
rownames_to_column("gene") %>%
as.data.frame() %>%
reduce(full_join, by = "gene")
}
####Libraries####
library(tidyverse)
library(edgeR)
library(preprocessCore) # for quantile normalization
library(PMCMRplus)  # for Williams Trend Test
library(purrr)
#Import metadata
metadata <- read.csv("metadata.csv")
colnames(metadata) <- c("Chemical","3uM","10-1","10-2","10-3","10-4","10-5","Control")
chemnames <- metadata[1:6,1]
####Data Import####
raw_data <- list ()
for(i in chemnames) {
filenames <- list.files(paste0(i))
for(j in filenames){
raw_data[[i]][[j]] <- read.table(paste0(i,"/",j),
header = FALSE,
stringsAsFactors = FALSE,
sep = "\t",
strip.white = TRUE) [-c(1:4),-c(2:3)]
colnames(raw_data[[i]][[j]]) <- c("gene", j)
}
}
####Adjust row and col names####
#Set gene col as row names
for(i in 1:length(raw_data)) {
raw_data[[i]] <- raw_data[[i]] %>%
reduce(left_join, by = "gene") %>%
remove_rownames() %>%
column_to_rownames("gene")
}
#Clean up col names
for(i in 1:length(raw_data)) {
temp <- gsub(pattern = "-GQReadsPerGene.out.tab",
replacement = "",
x = names(raw_data[[i]]),
fixed = TRUE)
colnames(raw_data[[i]]) <- temp
remove(temp)
}
####Median Filtering####
#set threshold
median_thrs <- 5
#Remove genes that do not meet median threshold
raw_data_median_norm <- list()
for(i in chemnames) {
raw_data_median_norm[[i]] <- raw_data[[i]] %>%
mutate(count_median = apply(raw_data[[i]], 1, median)) %>%
filter(count_median >= median_thrs) %>%
select(-count_median)
####Combined all the data together####
for(i in 1:length(raw_data_median_norm)) {
raw_data_median_norm[[i]] <- raw_data_median_norm[[i]] %>%
rownames_to_column("gene") %>%
as.data.frame() %>%
reduce(full_join, by = "gene")
}
####Combined all the data together####
for(i in 1:length(raw_data_median_norm)) {
raw_data_median_norm[[i]] <- raw_data_median_norm[[i]] %>%
rownames_to_column("gene") %>%
as.data.frame() %>%
reduce(full_join, by = "gene")
}
#set threshold
median_thrs <- 5
#Remove genes that do not meet median threshold
raw_data_median_norm <- list()
for(i in chemnames) {
raw_data_median_norm[[i]] <- raw_data[[i]] %>%
mutate(count_median = apply(raw_data[[i]], 1, median)) %>%
filter(count_median >= median_thrs) %>%
select(-count_median)
}
####Combined all the data together####
for(i in 1:length(raw_data_median_norm)) {
raw_data_median_norm[[i]] <- raw_data_median_norm[[i]] %>%
rownames_to_column("gene") %>%
as.data.frame() %>%
reduce(full_join, by = "gene")
}
raw_data_median_norm %>% reduce(fill_join, by = "gene")
list(raw_data_median_norm) %>% reduce(fill_join, by = "gene")
raw_data_median_norm %>% reduce(full_join, by = "gene")
raw_data_median_norm %>% reduce(full_join, by = gene)
raw_data_median_norm %>% reduce(full_join, by = "gene")
View(raw_data_median_norm)
?mget
####Libraries####
library(tidyverse)
library(edgeR)
library(preprocessCore) # for quantile normalization
library(PMCMRplus)  # for Williams Trend Test
library(purrr)
#Import metadata
metadata <- read.csv("metadata.csv")
colnames(metadata) <- c("Chemical","3uM","10-1","10-2","10-3","10-4","10-5","Control")
chemnames <- metadata[1:6,1]
####Data Import####
raw_data <- list ()
for(i in chemnames) {
filenames <- list.files(paste0(i))
for(j in filenames){
raw_data[[i]][[j]] <- read.table(paste0(i,"/",j),
header = FALSE,
stringsAsFactors = FALSE,
sep = "\t",
strip.white = TRUE) [-c(1:4),-c(2:3)]
colnames(raw_data[[i]][[j]]) <- c("gene", j)
}
}
View(raw_data)
####Adjust row and col names####
#Set gene col as row names
for(i in 1:length(raw_data)) {
raw_data[[i]] <- raw_data[[i]] %>%
reduce(left_join, by = "gene") %>%
remove_rownames() %>%
column_to_rownames("gene")
}
#Clean up col names
for(i in 1:length(raw_data)) {
temp <- gsub(pattern = "-GQReadsPerGene.out.tab",
replacement = "",
x = names(raw_data[[i]]),
fixed = TRUE)
colnames(raw_data[[i]]) <- temp
remove(temp)
}
####Median Filtering####
#set threshold
median_thrs <- 5
#Remove genes that do not meet median threshold
raw_data_median_norm <- list()
for(i in chemnames) {
raw_data_median_norm[[i]] <- raw_data[[i]] %>%
mutate(count_median = apply(raw_data[[i]], 1, median)) %>%
filter(count_median >= median_thrs) %>%
select(-count_median)
}
####Combined all the data together####
for(i in 1:length(raw_data_median_norm)) {
raw_data_median_norm[[i]] <- raw_data_median_norm[[i]] %>%
rownames_to_column("gene")
}
View(raw_data)
test <- mget(unlist(raw_data_median_norm))
unlist(raw_data_median_norm)
test <- unlist(raw_data_median_norm)
test <- unlist(raw_data_median_norm[[1]])
test <- as.data.frame(unlist(raw_data_median_norm[[1]]))
View(test)
test <- as.data.frame(raw_data_median_norm[[1]])
View(test)
####Libraries####
library(tidyverse)
library(edgeR)
library(preprocessCore) # for quantile normalization
library(PMCMRplus)  # for Williams Trend Test
library(purrr)
#Import metadata
metadata <- read.csv("metadata.csv")
colnames(metadata) <- c("Chemical","3uM","10-1","10-2","10-3","10-4","10-5","Control")
chemnames <- metadata[1:6,1]
####Data Import####
raw_data <- list ()
for(i in chemnames) {
filenames <- list.files(paste0(i))
for(j in filenames){
raw_data[[i]][[j]] <- read.table(paste0(i,"/",j),
header = FALSE,
stringsAsFactors = FALSE,
sep = "\t",
strip.white = TRUE) [-c(1:4),-c(2:3)]
colnames(raw_data[[i]][[j]]) <- c("gene", j)
}
}
####Adjust row and col names####
#Set gene col as row names
for(i in 1:length(raw_data)) {
raw_data[[i]] <- raw_data[[i]] %>%
reduce(left_join, by = "gene") %>%
remove_rownames() %>%
column_to_rownames("gene")
}
#Clean up col names
for(i in 1:length(raw_data)) {
temp <- gsub(pattern = "-GQReadsPerGene.out.tab",
replacement = "",
x = names(raw_data[[i]]),
fixed = TRUE)
colnames(raw_data[[i]]) <- temp
remove(temp)
}
####Median Filtering####
#set threshold
median_thrs <- 5
#Remove genes that do not meet median threshold
raw_data_median_norm <- list()
for(i in chemnames) {
raw_data_median_norm[[i]] <- raw_data[[i]] %>%
mutate(count_median = apply(raw_data[[i]], 1, median)) %>%
filter(count_median >= median_thrs) %>%
select(-count_median)
}
####Combined all the data together####
for(i in 1:length(raw_data_median_norm)) {
raw_data_median_norm[[i]] <- raw_data_median_norm[[i]] %>%
rownames_to_column("gene")
}
my_merge <- function(df1, df2) {
merge(df1, df2, by = "gene")
}
Reduce(my_merge, raw_data_median_norm)
test <- Reduce(my_merge, raw_data_median_norm)
View(test)
View(raw_data_median_norm)
?merge
?full_join
####Libraries####
library(tidyverse)
library(edgeR)
library(preprocessCore) # for quantile normalization
library(PMCMRplus)  # for Williams Trend Test
library(purrr)
#Import metadata
metadata <- read.csv("metadata.csv")
colnames(metadata) <- c("Chemical","3uM","10-1","10-2","10-3","10-4","10-5","Control")
chemnames <- metadata[1:6,1]
####Data Import####
raw_data <- list ()
for(i in chemnames) {
filenames <- list.files(paste0(i))
for(j in filenames){
raw_data[[i]][[j]] <- read.table(paste0(i,"/",j),
header = FALSE,
stringsAsFactors = FALSE,
sep = "\t",
strip.white = TRUE) [-c(1:4),-c(2:3)]
colnames(raw_data[[i]][[j]]) <- c("gene", j)
}
}
####Adjust row and col names####
#Set gene col as row names
for(i in 1:length(raw_data)) {
raw_data[[i]] <- raw_data[[i]] %>%
reduce(left_join, by = "gene") %>%
remove_rownames() %>%
column_to_rownames("gene")
}
#Clean up col names
for(i in 1:length(raw_data)) {
temp <- gsub(pattern = "-GQReadsPerGene.out.tab",
replacement = "",
x = names(raw_data[[i]]),
fixed = TRUE)
colnames(raw_data[[i]]) <- temp
remove(temp)
}
####Median Filtering####
#set threshold
median_thrs <- 5
#Remove genes that do not meet median threshold
raw_data_median_norm <- list()
for(i in chemnames) {
raw_data_median_norm[[i]] <- raw_data[[i]] %>%
mutate(count_median = apply(raw_data[[i]], 1, median)) %>%
filter(count_median >= median_thrs) %>%
select(-count_median)
}
####Combined all the data together####
for(i in 1:length(raw_data_median_norm)) {
raw_data_median_norm[[i]] <- raw_data_median_norm[[i]] %>%
rownames_to_column("gene")
my_fj <- function(df1, df2) {
full_join(df1, df2, by = "gene")
}
test <- Reduce(my_fj, raw_data_median_norm)
my_fj <- function(df1, df2) {
full_join(df1, df2, by = "gene")
}
test <- Reduce(my_fj, raw_data_median_norm)
?merge
my_merge <- function(df1, df2) {
merge(df1, df2, by = "gene", all = TRUE)
}
test <- Reduce(my_merge, raw_data_median_norm)
my_merge <- function(df1, df2) {
merge(df1, df2, by = "gene",)
}
test <- Reduce(my_merge, raw_data_median_norm)
for(i in 1:length(raw_data_median_norm)) {
raw_data_median_norm[[i]] <- raw_data_median_norm[[i]] %>%
rownames_to_column("gene")
}
View(raw_data_median_norm)
my_merge <- function(df1, df2) {
merge(df1, df2, by = "gene",)
}
test <- Reduce(my_merge, raw_data_median_norm)
my_merge <- function(df1, df2) {
merge(df1, df2, by = "gene", all = TRUE)
}
test <- Reduce(my_merge, raw_data_median_norm)
View(test)
View(raw_data_median_norm)
####Libraries####
library(tidyverse)
library(edgeR)
library(preprocessCore) # for quantile normalization
library(PMCMRplus)  # for Williams Trend Test
library(purrr)
#Import metadata
metadata <- read.csv("metadata.csv")
colnames(metadata) <- c("Chemical","3uM","10-1","10-2","10-3","10-4","10-5","Control")
chemnames <- metadata[1:6,1]
####Data Import####
raw_data <- list ()
for(i in chemnames) {
filenames <- list.files(paste0(i))
for(j in filenames){
raw_data[[i]][[j]] <- read.table(paste0(i,"/",j),
header = FALSE,
stringsAsFactors = FALSE,
sep = "\t",
strip.white = TRUE) [-c(1:4),-c(2:3)]
colnames(raw_data[[i]][[j]]) <- c("gene", j)
}
}
####Adjust row and col names####
#Set gene col as row names
for(i in 1:length(raw_data)) {
raw_data[[i]] <- raw_data[[i]] %>%
reduce(left_join, by = "gene") %>%
remove_rownames() %>%
column_to_rownames("gene")
}
#Clean up col names
for(i in 1:length(raw_data)) {
temp <- gsub(pattern = "-GQReadsPerGene.out.tab",
replacement = "",
x = names(raw_data[[i]]),
fixed = TRUE)
colnames(raw_data[[i]]) <- temp
remove(temp)
}
####Median Filtering####
#set threshold
median_thrs <- 5
#Remove genes that do not meet median threshold
raw_data_median_filtered <- list()
for(i in chemnames) {
raw_data_median_filtered[[i]] <- raw_data[[i]] %>%
mutate(count_median = apply(raw_data[[i]], 1, median)) %>%
filter(count_median >= median_thrs) %>%
select(-count_median)
}
####Combined all the data together####
for(i in 1:length(raw_data_median_filtered)) {
raw_data_median_filtered[[i]] <- raw_data_median_filtered[[i]] %>%
rownames_to_column("gene")
}
my_merge <- function(df1, df2) {
merge(df1, df2, by = "gene", all = TRUE)
}
combined_data_median_filtered <- Reduce(my_merge, raw_data_median_filtered)
View(raw_data_median_filtered)
View(raw_data)
View(raw_data_median_filtered)
View(raw_data)
View(raw_data_median_filtered)
View(raw_data)
View(raw_data)
View(combined_data_median_filtered)
combined_data_median_filtered <- Reduce(my_merge, raw_data_median_filtered) %>%
remove_rownames() %>%
column_to_rownames("gene")
View(combined_data_median_filtered)
view(raw_data_median_filtered[[1]])
View(combined_data_median_filtered)
pca_model <- prcomp(t(log2(combined_data_median_filtered+1)), center = TRUE, scale. = TRUE)
autoplot(pca_model, label = TRUE)
#color by experiment
?prcomp
pca_model <- prcomp(t(log2(combined_data_median_filtered+1)), center = TRUE, scale. = TRUE)
autoplot(pca_model, label = TRUE)
#color by experiment
pca_model <- prcomp(t(log2(combined_data_median_filtered+1)), center = TRUE, scale. = TRUE, na.omit)
autoplot(pca_model, label = TRUE)
pca_model <- prcomp(t(log2(combined_data_median_filtered+1)), center = TRUE, scale. = TRUE, na.omit = TRUE)
autoplot(pca_model, label = TRUE)
combined_data_median_filtered[is.na(combined_data_median_filtered)] <- 0
View(combined_data_median_filtered)
pca_model <- prcomp(t(log2(combined_data_median_filtered+1)), center = TRUE, scale. = TRUE, na.omit = TRUE)
autoplot(pca_model, label = TRUE)
pca_model <- prcomp(t(log2(combined_data_median_filtered+1)), center = TRUE, scale. = TRUE)
autoplot(pca_model, label = TRUE)
library(tidyverse)
library(edgeR)
library(preprocessCore) # for quantile normalization
library(PMCMRplus)  # for Williams Trend Test
library(purrr)
library(ggfortify)
pca_model <- prcomp(t(log2(combined_data_median_filtered+1)), center = TRUE, scale. = TRUE)
autoplot(pca_model, label = TRUE)
?autoplot
pca_model <- prcomp(t(log2(combined_data_median_filtered+1)), center = TRUE, scale. = TRUE)
autoplot(pca_model)
View(metadata)
?names
colnames(combined_data_median_filtered)
?gsub
gsub(pattern = '_.*'
replacement = ""
x = colnames(combined_data_median_filtered)
fixed = TRUE)
gsub(pattern = '_.*', replacement = "", x = colnames(combined_data_median_filtered), fixed = TRUE)
test <- gsub(pattern = '_.*', replacement = "", x = colnames(combined_data_median_filtered), fixed = TRUE)
test <- gsub(pattern = '_.*', replacement = "", x = colnames(combined_data_median_filtered))
colnames(combined_data_median_filtered) <- test
View(combined_data_median_filtered)
####Median Filtering####
#set threshold
median_thrs <- 5
#Remove genes that do not meet median threshold
raw_data_median_filtered <- list()
for(i in chemnames) {
raw_data_median_filtered[[i]] <- raw_data[[i]] %>%
mutate(count_median = apply(raw_data[[i]], 1, median)) %>%
filter(count_median >= median_thrs) %>%
select(-count_median)
}
####Combined all the data together####
for(i in 1:length(raw_data_median_filtered)) {
raw_data_median_filtered[[i]] <- raw_data_median_filtered[[i]] %>%
rownames_to_column("gene")
}
my_merge <- function(df1, df2) {
merge(df1, df2, by = "gene", all = TRUE)
}
combined_data_median_filtered <- Reduce(my_merge, raw_data_median_filtered) %>%
remove_rownames() %>%
column_to_rownames("gene")
combined_data_median_filtered[is.na(combined_data_median_filtered)] <- 0
test <- gsub(pattern = '_.*', replacement = "", x = colnames(combined_data_median_filtered))
colnames(combined_data_median_filtered) <- test
install.packages("FactoMineR")
library(FactoMineR)
View(combined_data_median_filtered)
test.pca <- PCA(combined_data_median_filtered)
?plot
test.pca <- PCA(combined_data_median_filtered, quali.sup = 6)
plot(test.pca, habillage = 6,
col.hab = c("red", "orange", "green", "blue", "purple", "black"))
View(test.pca)
View(test.pca)
View(test.pca)
test.pca <- PCA(combined_data_median_filtered)
plot(test.pca)
test.pca <- PCA(t(combined_data_median_filtered))
plot(test.pca)
pca_model$x
pca_model$x[,1]
View(pca_model)
pca_model <- prcomp(t(log2(combined_data_median_filtered+1)), center = TRUE, scale. = TRUE)
autoplot(pca_model)
