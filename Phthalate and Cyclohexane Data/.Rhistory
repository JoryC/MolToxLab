theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = log10(as.numeric(lowestdoses[i,2])), color = "red", size = 1.5) +
geom_vline(xintercept = tPoD_values[i, "first_mode"], color = "blue", size = 1.5) +
geom_vline(xintercept = tPoD_values[i, "X10th_percentile"], color = "green", size = 1.5) +
geom_vline(xintercept = tPoD_values[i, "X20th_gene"], color = "purple", size = 1.5)
)
if(savefigures == TRUE && multiplot == FALSE){
dev.off()
}
}
if(savefigures == TRUE && multiplot == TRUE){
dev.off()
}
####Libraries####
library(tidyverse)
####Libraries####
library(tidyverse)
####Metadata Import####
metadata <- read.csv("RNAseqData/metadata_nocontrol.csv")
chemnames <- unique(metadata$chemical)
lowestdoses <- unique(metadata[,c("chemical","dose")]) %>%
group_by(chemical) %>%
filter(dose>0) %>%
summarise_all(min)
View(lowestdoses)
BMD_summary <- data.frame()
BMD_summary[,1] <- c(chemnames)
BMD_summary[,1] <- chemnames
BMD_summary <- data.frame()
for(i in 1:length(chemnames)){
BMD_summary[i,1]<- chemnames[i]
}
View(BMD_summary)
filenames <- list.files(".*_values.txt")
filenames <- list.files()
filenames <- list.files(".*.txt")
filenames <- list.files(pattern = ".*_values.txt")
for(i in 1:length(filenames)){
BMD_summary <- merge(BMD_summary, read.table(filenames[i], by = 'chemical'))
}
for(i in 1:length(filenames)){
BMD_summary <- merge(BMD_summary, read.table(filenames[i]), by = 'chemical')
}
for(i in 1:length(filenames)){
temp1 <-  read.table(filenames[i])
BMD_summary <- merge(BMD_summary, temp1, by = 'chemical')
}
View(temp1)
View(BMD_summary)
BMD_summary <- data.frame()
for(i in 1:length(chemnames)){
BMD_summary[i,1]<- chemnames[i]
}
colnames(BMD_summary) <- "chemical"
View(BMD_summary)
for(i in 1:length(filenames)){
temp1 <-  read.table(filenames[i])
BMD_summary <- merge(BMD_summary, temp1, by = 'chemical')
}
View(BMD_summary)
for(i in 1:length(filenames)){
temp1 <-  read.table(filenames[i])
BMD_summary <- merge(BMD_summary, temp1, by = 'chemical')
}
####Libraries####
library(tidyverse)
source("BMDExpressFunctions.R")
####Metadata Import####
metadata <- read.csv("RNAseqData/metadata_nocontrol.csv")
chemnames <- unique(metadata$chemical)
lowestdoses <- unique(metadata[,c("chemical","dose")]) %>%
group_by(chemical) %>%
filter(dose>0) %>%
summarise_all(min)
filenames <- list.files(pattern = ".*_values.txt")
columnnames <- c("chemical", "Lowest GO Term Median", "Reactome Median", "First Mode", "10th Percentile", "20th Gene")
####Create summary of data####
BMD_summary <- data.frame()
for(i in 1:length(chemnames)){
BMD_summary[i,1]<- chemnames[i]
}
colnames(BMD_summary) <- "chemical"
for(i in 1:length(filenames)){
temp1 <-  read.table(filenames[i])
BMD_summary <- merge(BMD_summary, temp1, by = 'chemical')
rm(temp1)
}
colnames(BMD_summary) <- columnnames
View(BMD_summary)
BMD_summary_temp <- BMD_summary %>%
column_to_rownames(var = 'chemical') %>%
t() %>%
as.data.frame() %>%
rownames_to_column()
BMD_Summary_List <- list()
for(i in 1:length(chemnames)){
BMD_Summary_List[[chemnames[i]]] <- BMD_summary_temp[,c(1,i+1)]
colnames(BMD_Summary_List[[chemnames[i]]]) <- c("Endpoint_Type", "logBMD")
}
min_x <- -5
max_x <- 1
ggplot(BMD_Summary_List[[1]], aes(x = logBMD, y = Endpoint_Type)) + # can plot by "rank" or "count"
# x and y axis lims
xlim(min_x,max_x) +
# plot data
geom_point(size=3, col="Black") +
# labels
labs(title = paste(names(BMD_Summary_List[1]), "Endpoints"), x = "logBMD", y = "Endpoint Type") +
#theme
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=12))
summary_plots <- list()
min_x <- -5
max_x <- 1
summary_plots <- list()
for(i in chemnames){
summary_plots[[i]] <- ggplot(BMD_Summary_List[[i]], aes(x = logBMD, y = Endpoint_Type)) + # can plot by "rank" or "count"
# x and y axis lims
xlim(min_x,max_x) +
# plot data
geom_point(size=3, col="Black") +
# labels
labs(title = paste(names(BMD_Summary_List[1]), "Endpoints"), x = "logBMD", y = "Endpoint Type") +
# theme
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=12))
}
View(summary_plots)
multiplot(plotlist=summary_plots, cols=3)
summary_plots <- list()
for(i in chemnames){
summary_plots[[i]] <- ggplot(BMD_Summary_List[[i]], aes(x = logBMD, y = Endpoint_Type)) + # can plot by "rank" or "count"
# x and y axis lims
xlim(min_x,max_x) +
# plot data
geom_point(size=3, col="Black") +
# labels
labs(title = paste(names(BMD_Summary_List[i]), "Endpoints"), x = "logBMD", y = "Endpoint Type") +
# theme
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=12))
}
multiplot(plotlist=summary_plots, cols=3)
min_x <- -5
max_x <- 1
summary_plots <- list()
for(i in chemnames){
summary_plots[[i]] <- ggplot(BMD_Summary_List[[i]], aes(x = logBMD, y = Endpoint_Type)) + # can plot by "rank" or "count"
# x and y axis lims
xlim(min_x,max_x) +
# plot data
geom_point(size=3, col="Black") +
# labels
labs(title = paste(names(BMD_Summary_List[i]), "Endpoints"), x = "logBMD", y = "") +
# theme
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=12))
}
multiplot(plotlist=summary_plots, cols=3)
####Libraries####
library(tidyverse)
source("BMDExpressFunctions.R")
####Metadata Import####
metadata <- read.csv("RNAseqData/metadata_nocontrol.csv")
chemnames <- unique(metadata$chemical)
lowestdoses <- unique(metadata[,c("chemical","dose")]) %>%
group_by(chemical) %>%
filter(dose>0) %>%
summarise_all(min)
filenames <- list.files(pattern = ".*_values.txt")
columnnames <- c("chemical", "GO Term Median", "Reactome Median", "First Mode", "10th Percentile", "20th Gene")
####Create summary of data####
BMD_summary <- data.frame()
for(i in 1:length(chemnames)){
BMD_summary[i,1]<- chemnames[i]
}
colnames(BMD_summary) <- "chemical"
for(i in 1:length(filenames)){
temp1 <-  read.table(filenames[i])
BMD_summary <- merge(BMD_summary, temp1, by = 'chemical')
rm(temp1)
}
colnames(BMD_summary) <- columnnames
BMD_summary_temp <- BMD_summary %>%
column_to_rownames(var = 'chemical') %>%
t() %>%
as.data.frame() %>%
rownames_to_column()
BMD_Summary_List <- list()
for(i in 1:length(chemnames)){
BMD_Summary_List[[chemnames[i]]] <- BMD_summary_temp[,c(1,i+1)]
colnames(BMD_Summary_List[[chemnames[i]]]) <- c("Endpoint_Type", "logBMD")
}
min_x <- -5
max_x <- 1
summary_plots <- list()
for(i in chemnames){
summary_plots[[i]] <- ggplot(BMD_Summary_List[[i]], aes(x = logBMD, y = Endpoint_Type)) + # can plot by "rank" or "count"
# x and y axis lims
xlim(min_x,max_x) +
# plot data
geom_point(size=3, col="Black") +
# labels
labs(title = paste(names(BMD_Summary_List[i]), "Endpoints"), x = "logBMD", y = "") +
# theme
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=12))
}
multiplot(plotlist=summary_plots, cols=3)
library(tidyverse)
diamonds %>%
group_by(cut) %>%
ggplot(aes(x = color, y = price)) +
geom_point() +
facet_wrap(~cut)
####Libraries####
library(tidyverse)
source("BMDExpressFunctions.R")
####Metadata Import####
metadata <- read.csv("RNAseqData/metadata_nocontrol.csv")
chemnames <- unique(metadata$chemical)
lowestdoses <- unique(metadata[,c("chemical","dose")]) %>%
group_by(chemical) %>%
filter(dose>0) %>%
summarise_all(min)
filenames <- list.files(pattern = ".*_values.txt")
columnnames <- c("chemical", "GO Term Median", "Reactome Median", "First Mode", "10th Percentile", "20th Gene")
####Create summary of data####
BMD_summary <- data.frame()
for(i in 1:length(chemnames)){
BMD_summary[i,1]<- chemnames[i]
}
colnames(BMD_summary) <- "chemical"
for(i in 1:length(filenames)){
temp1 <-  read.table(filenames[i])
BMD_summary <- merge(BMD_summary, temp1, by = 'chemical')
rm(temp1)
}
colnames(BMD_summary) <- columnnames
BMD_summary_temp <- BMD_summary %>%
column_to_rownames(var = 'chemical') %>%
t() %>%
as.data.frame() %>%
rownames_to_column()
BMD_Summary_List <- list()
for(i in 1:length(chemnames)){
BMD_Summary_List[[chemnames[i]]] <- BMD_summary_temp[,c(1,i+1)]
colnames(BMD_Summary_List[[chemnames[i]]]) <- c("Endpoint_Type", "logBMD")
}
min_x <- -5
max_x <- 1
summary_plots <- list()
for(i in chemnames){
summary_plots[[i]] <- ggplot(BMD_Summary_List[[i]], aes(x = logBMD, y = Endpoint_Type)) + # can plot by "rank" or "count"
# x and y axis lims
xlim(min_x,max_x) +
# plot data
geom_point(size=3, col="Black") +
# labels
labs(title = paste(names(BMD_Summary_List[i]), "Endpoints"), x = "logBMD", y = "") +
# theme
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=12))
}
multiplot(plotlist=summary_plots[[1]], cols=3)
multiplot(plotlist=summary_plots[[1]])
multiplot(plotlist=summary_plots, cols=3)
print(summary_plots[[1]])
install.packages("rstudioapi")
rstudioapi::addTheme("https://raw.githubusercontent.com/takemal-studio/RStudio_Zinogre_theme/master/zinogre.rstheme", apply = TRUE)
install.packages("rstudioapi")
rstudioapi::addTheme("https://raw.githubusercontent.com/cobriant/vaporwave.rstheme/main/vaporwave_theme.rstheme", apply = TRUE)
####Libraries####
library(tidyverse)
source("BMDExpressFunctions.R")
####Metadata Import####
metadata <- read.csv("RNAseqData/metadata_nocontrol.csv")
chemnames <- unique(metadata$chemical)
lowestdoses <- unique(metadata[,c("chemical","dose")]) %>%
group_by(chemical) %>%
filter(dose>0) %>%
summarise_all(min)
filenames <- list.files(pattern = ".*_values.txt")
columnnames <- c("chemical", "GO Term Median", "Reactome Median", "First Mode", "10th Percentile", "20th Gene")
####Create summary of data####
BMD_summary <- data.frame()
for(i in 1:length(chemnames)){
BMD_summary[i,1]<- chemnames[i]
}
colnames(BMD_summary) <- "chemical"
for(i in 1:length(filenames)){
temp1 <-  read.table(filenames[i])
BMD_summary <- merge(BMD_summary, temp1, by = 'chemical')
rm(temp1)
}
colnames(BMD_summary) <- columnnames
BMD_summary_temp <- BMD_summary %>%
column_to_rownames(var = 'chemical') %>%
t() %>%
as.data.frame() %>%
rownames_to_column()
BMD_Summary_List <- list()
for(i in 1:length(chemnames)){
BMD_Summary_List[[chemnames[i]]] <- BMD_summary_temp[,c(1,i+1)]
colnames(BMD_Summary_List[[chemnames[i]]]) <- c("Endpoint_Type", "logBMD")
}
min_x <- -5
max_x <- 1
summary_plots <- list()
for(i in chemnames){
summary_plots[[i]] <- ggplot(BMD_Summary_List[[i]], aes(x = logBMD, y = Endpoint_Type)) + # can plot by "rank" or "count"
# x and y axis lims
xlim(min_x,max_x) +
# plot data
geom_point(size=3, col="Black") +
# labels
labs(title = paste(names(BMD_Summary_List[i]), "Endpoints"), x = "logBMD", y = "") +
# theme
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=12))
}
multiplot(plotlist=summary_plots, cols=3)
####Libraries####
#library(Rfast)
library(tidyverse)
library(purrr)
source("BMDExpressFunctions.R")
####Metadata Import####
metadata <- read.csv("RNAseqData/metadata_nocontrol.csv")
chemnames <- unique(metadata$chemical)
lowestdoses <- unique(metadata[,c("chemical","dose")]) %>%
group_by(chemical) %>%
filter(dose>0) %>%
summarise_all(min)
####Data Import####
# NOTE: raw bmdexpress export files in .txt are broken... can be imported but not correctly and give many errors...
# Must be converted to a csv file first.
raw_data <- list()
filenames <- list.files("BMDExpressData/GO_TERM_CSV")
for(i in 1:length(chemnames)){
raw_data[[chemnames[i]]] <- read.csv(paste0("BMDExpressData/GO_TERM_CSV/",filenames[i]), header = TRUE) %>%
cleanupcolumns_goterm()
}
tPoD_values <- read.table(file = "tpod_values.txt")
####Filter Data####
raw_data_filtered <- list()
for(i in 1:length(raw_data)){
raw_data_filtered[[chemnames[i]]] <- goterm_filtering(x = raw_data[[i]]) %>%
mutate(logBMD = log10(BMD.Median)) %>%
arrange(logBMD)
}
####Export Lowest Median GO-Term####
export_median <- TRUE
GO_Term_Endpoints <- data.frame()
for(i in 1:length(chemnames)){
GO_Term_Endpoints[i,1] <- chemnames[i]
GO_Term_Endpoints[i,2] <- raw_data_filtered[[i]][1,"logBMD"]
}
colnames(GO_Term_Endpoints) <- c("chemical", "go_term_median")
if(export_median == TRUE){
write.table(GO_Term_Endpoints, file = "go_term_values.txt", quote = FALSE, sep = "\t")
}
View(raw_data_filtered)
####Libraries####
library(Rfast)
library(tidyverse)
library(purrr)
source("BMDExpressFunctions.R")
####Metadata Import####
metadata <- read.csv("RNAseqData/metadata_nocontrol.csv")
chemnames <- unique(metadata$chemical)
lowestdoses <- unique(metadata[,c("chemical","dose")]) %>%
group_by(chemical) %>%
filter(dose>0) %>%
summarise_all(min)
#### load tPod Values ####
tPoD_values <- read.table(file = "tpod_values.txt")
#### BMD HISTOGRAM #####
# load BMD values for histograms
raw_hist_data <- list()
filenames <- list.files("BMDExpressData/BMD")
for(i in 1:length(chemnames)){
raw_hist_data[[chemnames[i]]] <- read.table(paste0("BMDExpressData/BMD/",filenames[i]), header = TRUE, sep = "\t") %>%
cleanupcolumns()
}
# Filter
filtered_hist_data <- list()
for(i in chemnames){
filtered_hist_data[[i]] <- BMDfiltering(x = raw_hist_data[[i]],
lowdose = lowestdoses$dose[lowestdoses$chemical==i],
highdose = 3,
) %>%
mutate(logBMD = log10(BMD))
}
# Set arguments for mode function
source("mode_antimode.R")
min_dense<-0.06
min_bw <- 0.015
bwFun<-"SJ"
# calculate modes (to obtain bandwidth) and breaks
dataModes <- list()
histBreaks <- list()
for(i in chemnames){
dataModes[[i]]<-mode.antimode(filtered_hist_data[[i]]$logBMD ,min.size=min_dense, bw="SJ", min.bw=min_bw)
histBreaks[[i]]<-seq(
from = min(filtered_hist_data[[i]]$logBMD) - dataModes[[i]]$bw,
to = max(filtered_hist_data[[i]]$logBMD) + dataModes[[i]]$bw,
by = dataModes[[i]]$bw
)
}
View(dataModes)
dataModes[[1]]
View(raw_hist_data)
histBreaks <- list()
for(i in chemnames){
dataModes[[i]]<-mode.antimode(filtered_hist_data[[i]]$logBMD ,min.size=min_dense, bw="SJ", min.bw=min_bw)
histBreaks[[i]]<-seq(
from = min(filtered_hist_data[[i]]$logBMD) - dataModes[[i]]$bw,
to = max(filtered_hist_data[[i]]$logBMD) + dataModes[[i]]$bw,
by = dataModes[[i]]$bw
)
}
# historgram plot values
dataHist<-list()
for(i in chemnames){
dataHist[[i]]<- hist(filtered_hist_data[[i]]$logBMD,
breaks=histBreaks[[i]],
plot=FALSE
)
dataHist[[i]] <- data.frame(x=dataHist[[i]]$mids, y=dataHist[[i]]$count)
}
View(dataHist)
View(dataHist)
print(dataHist[[1]])
# historgram plot values
dataHist<-list()
for(i in chemnames){
dataHist[[i]]<- hist(filtered_hist_data[[i]]$logBMD,
breaks=histBreaks[[i]],
plot=FALSE
)
# dataHist[[i]] <- data.frame(x=dataHist[[i]]$mids, y=dataHist[[i]]$count)
}
dataHist[[1]]
#### LIBRARIES AND FUCNTION SOURCE ####
library(tidyverse)
library(edgeR)
library(preprocessCore) # for quantile normalization
library(PMCMRplus)  # for Williams Trend Test
library(purrr)
library(ggfortify)
source("RNAseqFunctions.R")
#### IMPORT METADATA ####
metadata <- read.csv("RNAseqData/metadata_nocontrol.csv", header = TRUE) %>%
arrange(chemical, dose)
#### IMPORT SEQ DATA ####
# folders containing ONLY raw data
dataFolders <- paste0("RNAseqData/RawData/",dir("RNAseqData/RawData"))
# load data into a list
loadRaw<-list()
for(i in dataFolders){
fileNames <- list.files(paste0(i))
for(j in fileNames){
loadRaw[[j]] <- read.table(paste0(i,"/",j),
header = FALSE,
stringsAsFactors = FALSE,
sep = "\t",
strip.white = TRUE) [-c(1:4),-c(2:3)]
colnames(loadRaw[[j]])<-c("gene", j)
}
}
# join,
allData <- reduce(loadRaw, full_join, by="gene") %>%
# transpose,
column_to_rownames("gene") %>%
t() %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
# convert to tibble,
as_tibble() %>%
# merge with metadata,
left_join(x = metadata, y = ., by="sample") %>%
# convert chemical and dose to factors,
mutate(chemical = as.factor(chemical), dose = as.factor(dose)) %>%
# and group by chemical
group_by(chemical)
# NEST data: a neat little function that is similar to breaking the data into lists. However the data stay in "tibble" format, and can be manipulated with dplyr commands
nestData <- allData %>%
nest()
#### FILTER ####
# uses the "countFiler' function from the "RNAseqFunctions" source code
nestData <- nestData %>%
mutate(filterData = map(data, countFilter, grouping = "dose", median_threshold = 5))
#### NORMALIZE ####
nestData <- nestData %>%
mutate(normData = map(filterData, tmmNorm))
#### EXPORT NORM DATA ####
if(TRUE){
apply(nestData, 1, FUN = function(x){
outData <- x$normData %>%
select(-sample, -dose) %>%
t() %>%
as.data.frame()
colnames(outData) <- x$normData$dose
outData <- data.frame(gene=rownames(outData), outData, check.names = FALSE)
write_delim(outData,
paste0("RNAseqData/normalizedData/",x$chemical, "_normData.txt"),
delim = "\t"
)
})
}
